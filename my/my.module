<?php


/**
 * Implements hook_filter_info().
 *
 * Here we define the different filters provided by the module. For this example,
 * time_filter is a very static and simple replacement, but it requires some
 * preparation of the string because of the special html tags < and >. The
 * foo_filter is more complex, including its own settings and inline tips.
 */
function my_filter_info() {
  $filters['gallary_literal'] = array(
    'title' => '将描述图片册的文本转成HTML',
    'process callback'  => '_my_gallary_literal_process',
    'default settings' => array(
      'gallary_literal' => 'bar',
    ),
    'settings callback' => '_my_gallary_literal_filter_settings',
    'tips callback' => '_my_gallary_literal_filter_tips',
  );
  $filters['filter_time'] = array(
    'title' => t('Time tag'),
    'description' => t('Every instance of the special &lt;time /&gt; tag will be replaced with the current date and time in the user\'s specified time zone.'),
    'prepare callback' => '_filter_example_filter_time_prepare',
    'process callback' => '_filter_example_filter_time_process',
    'tips callback' => '_filter_example_filter_time_tips',
  );
  return $filters;
}



/*
 * Foo filter
 *
 * Drupal has several text formats (they are not filters), and in our example
 * the foo replacement can be configured for each one of them, so the module
 * includes a settings callback, with options to configure those replacements.
 * Also, a Tips callback will help showing the current replacement
 * for the content type being edited.
 */

/**
 * Settings callback for foo filter
 *
 * Make use of $format to have different replacements for every input format.
 * Since we allow the administrator to define the string that gets substituted
 * when "foo" is encountered, we need to provide an interface for this kind of
 * customization. The object format is also an argument of the callback.
 *
 * The settings defined in this form are stored in database by the filter
 * module, and they will be available in the $filter argument.
 */
function _my_gallary_literal_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['gallary_literal'] = array(
    '#type' => 'textfield',
    '#title' => '标签',
    '#default_value' => isset($filter->settings['gallary_literal']) ? $filter->settings['gallary_literal'] : $defaults['gallary_literal'],
    '#description' => '转换设置'
  );
  return $settings;
}

/**
 * Foo filter process callback.
 *
 * The actual filtering is performed here. The supplied text should be returned,
 * once any necessary substitutions have taken place. The example just replaces
 * foo with our custom defined string in the settings page.
 */
function _my_gallary_literal_process($text, $filter, $format) {
  $replacement = isset($filter->settings['gallary_literal']) ? $filter->settings['gallary_literal'] : 'bar';
  return str_replace('foo', $replacement, $text);
}


/**
 * Filter tips callback for foo filter.
 *
 * The tips callback allows filters to provide help text to users during the
 * content editing process. Short tips are provided on the content editing
 * screen, while long tips are provided on a separate linked page. Short tips
 * are optional, but long tips are highly recommended.
 */
function _my_gallary_literal_filter_tips($filter, $format, $long = FALSE) {
  $replacement = isset($filter->settings['gallary_literal']) ? $filter->settings['gallary_literal'] : 'bar';
  if (!$long) {
    // This string will be shown in the content add/edit form
    return t('<em>foo</em> replaced with %replacement.', array('%replacement' => $replacement));
  }
  else {
    return t('Every instance of "foo" in the input text will be replaced with a configurable value. You can configure this value and put whatever you want there. The replacement value is "%replacement".', array('%replacement' => $replacement));
  }
}

/**
 * Time filter prepare callback.
 *
 * We'll use [filter-example-time] as a replacement for the time tag.
 * Note that in a more complicated filter a closing tag may also be
 * required. For more information, see "Temporary placeholders and
 * delimiters" at http://drupal.org/node/209715.
 */
function _filter_example_filter_time_prepare($text, $filter) {
  return preg_replace('!<time ?/>!', '[filter-example-time]', $text);
}

/**
 * Time filter process callback.
 *
 * Now, in the "process" step, we'll search for our escaped time tags and
 * do the real filtering: replace the xml tag with the date.
 */
function _filter_example_filter_time_process($text, $filter) {
  return str_replace('[filter-example-time]', '<em>' . format_date(time()) . '</em>', $text);
}


/**
 * Filter tips callback for time filter.
 *
 * The tips callback allows filters to provide help text to users during the
 * content editing process. Short tips are provided on the content editing
 * screen, while long tips are provided on a separate linked page. Short tips
 * are optional, but long tips are highly recommended.
 */
function _filter_example_filter_time_tips($filter, $format, $long = FALSE) {
  return t('<em>&lt;time /&gt;</em> is replaced with the current time.');
}
/**
 * @} End of "defgroup filter_example".
 */
